import asyncio
import os
from datetime import datetime, timedelta, timezone

import openai
from asgiref.sync import sync_to_async
from django.contrib.auth import get_user_model
from django.shortcuts import get_object_or_404
from dotenv import load_dotenv
from telegram import ChatAction, InputMediaPhoto, ParseMode, Update
from telegram.ext import CallbackContext, ConversationHandler

from ..checking import check_registration
from ..cleaner import remove_keyboard
from ..models import HistoryDALLE

load_dotenv()

APY_KEY = os.getenv('CHAT_GP_TOKEN')
openai.api_key = APY_KEY

ADMIN_ID = os.getenv('ADMIN_ID')

User = get_user_model()


class GetAnswerDallE():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.
    –î–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –≤ —á–∞—Ç Telegram –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–≤–µ—Ç–∞
    –æ—Ç API –ò–ò Dall-E.
    """

    ERROR_TEXT = (
        '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ü§∑üèº\n'
        '–í–æ–∑–º–æ–∂–Ω–æ –±–æ–ª—å—à–æ–π –Ω–∞–ø–ª—ã–≤ –∑–∞–ø—Ä–æ—Å–æ–≤, '
        '–∫–æ—Ç–æ—Ä—ã–µ —è –Ω–µ —É—Å–ø–µ–≤–∞—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å ü§Ø'
    )
    MAX_TYPING_TIME = 10
    STORY_WINDOWS_TIME = 15

    def __init__(self,
                 update: Update,
                 context: CallbackContext) -> None:
        self.update = update
        self.context = context
        self.current_time = None
        self.time_start = None
        self.chat_id = None
        self.message_text = None
        self.media_group = []
        self.event = asyncio.Event()
        self.set_message_text()
        self.set_chat_id()
        self.set_user()
        self.set_windows_time()

    def get_image_dall_e(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ—Ä–∏—é –∫–∞—Ä—Ç–∏–Ω–æ–∫ –æ—Ç –ê–ü–ò Dall-e 2.
        –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∑–≤–∞–≤ —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
        """
        if self.check_in_works():
            return {'code': 423}

        answers = {
            '': ('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è '
                 '[–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π]'
                 f'({self.context.bot.link})'),
        }

        if check_registration(self.update, self.context, answers) is False:
            return {'code': 401}

        try:
            asyncio.run(self.get_answer())

            media_group_dict = [
                {'media': item.media, 'caption': item.caption}
                for item in self.media_group
            ]
            HistoryDALLE.objects.update(
                user=self.user,
                question=self.message_text,
                answer=media_group_dict
            )

        except Exception as err:
            self.context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f'–û—à–∏–±–∫–∞ –≤ Dall-E: {err.args[0]}',
            )
        finally:
            self.context.bot.send_media_group(
                chat_id=self.chat_id,
                media=self.media_group,
                reply_to_message_id=self.update.message.message_id
            )

    async def get_answer(self) -> list:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç 2 —Ñ—É–Ω–∫—Ü–∏–∏.
        """
        asyncio.create_task(self.send_typing_periodically())
        await sync_to_async(self.request_to_openai)()

    async def send_typing_periodically(self) -> None:
        """"
        –ü–µ—Ä–µ–¥–∞—ë—Ç TYPING –≤ —á–∞—Ç –¢–µ–ª–µ–≥—Ä–∞–º –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à—ë–ª –∑–∞–ø—Ä–æ—Å.
        """
        time_stop = (
            datetime.now()
            + timedelta(minutes=GetAnswerDallE.MAX_TYPING_TIME)
        )
        while not self.event.is_set():
            self.context.bot.send_chat_action(
                chat_id=self.chat_id,
                action=ChatAction.UPLOAD_PHOTO
            )
            await asyncio.sleep(2)
            if datetime.now() > time_stop:
                break

    def request_to_openai(self) -> list:
        """
        –î–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ OpenAI.
        """
        response = openai.Image.create(
            prompt=self.message_text,
            n=5,
            size='1024x1024'
        )
        for number, url in enumerate(response['data']):
            self.media_group.append(
                InputMediaPhoto(media=url['url'], caption=f'Gen ‚Ññ {number}')
            )
        self.event.set()

    def set_message_text(self) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç message_text."""
        self.message_text = (
            self.update.effective_message.text
        )

    def set_chat_id(self) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç chat_id."""
        self.chat_id = (
            self.update.effective_chat.id
        )

    def set_user(self) -> None:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º  –∞—Ç—Ä–∏–±—É—Ç user."""
        self.user = get_object_or_404(
            User,
            username=self.update.effective_user.id
        )

    def set_windows_time(self) -> None:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã current_time –∏ time_start."""
        self.current_time = datetime.now(timezone.utc)
        self.time_start = (
            self.current_time
            - timedelta(minutes=GetAnswerDallE.STORY_WINDOWS_TIME)
        )

    def check_in_works(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ—Ç –ª–∏ —É–∂–µ –≤ —Ä–∞–±–æ—Ç–µ —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."""
        if (self.user.history_dalle.filter(
                created_at__range=[self.time_start, self.current_time],
                question=self.message_text).exists()):
            return True
        HistoryDALLE.objects.create(
            user=self.user,
            question=self.message_text,
            answer=[GetAnswerDallE.ERROR_TEXT]
        )
        return False


def first_step_get_image(update: Update, context: CallbackContext):
    chat = update.effective_chat
    req_text = (
        f'*{update.effective_user.first_name}*, '
        '–≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ'
    )
    message_id = context.bot.send_message(
        chat.id,
        req_text,
        parse_mode=ParseMode.MARKDOWN
    ).message_id
    context.user_data['image_gen'] = message_id
    remove_keyboard(update, context)
    return 'image_gen'


def get_image_dall_e(update: Update, context: CallbackContext):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç first_step_get_image.
    –í—Ö–æ–¥ –≤ –∫–ª–∞—Å—Å GetAnswerDallE –∏ –≤ —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ª—é–±–æ–≥–æ
    –∑–Ω–∞—á–µ–Ω–∏—è –∫—Ä–æ–º–µ —Å –∫–æ–¥–æ–º 423, –≤–æ–∑–≤—Ä–∞—Ç ConversationHandler.
    """
    del_id = context.user_data.pop('image_gen', None)
    if del_id:
        context.bot.delete_message(update.effective_chat.id, del_id)

    result = GetAnswerDallE(update, context).get_image_dall_e()
    if not result or result.get('code') != 423:
        return ConversationHandler.END
