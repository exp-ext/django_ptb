from typing import Any, Iterable

from django.contrib.auth import get_user_model
from django.shortcuts import get_object_or_404
from telegram import (InlineKeyboardButton, InlineKeyboardMarkup,
                      KeyboardButton, ReplyKeyboardMarkup, Update)
from telegram.ext import CallbackContext
from users.models import Group, GroupConnections
from users.views import Signup, set_coordinates

from .cleaner import delete_messages_by_time
from .service_message import send_service_message

User = get_user_model()


def assign_group(update: Update):
    """–ü—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —é–∑–µ—Ä—É."""
    chat = update.effective_chat
    user_id = update.message.from_user.id

    if chat.type != 'private':
        user = get_object_or_404(
            User.objects.select_related('favorite_group'),
            username=user_id
        )
        group, _ = Group.objects.get_or_create(
            chat_id=chat.id
        )
        if group.title != chat.title:
            group.title = chat.title
            group.save()

        if not user.favorite_group:
            user.favorite_group = group
            user.save()

        GroupConnections.objects.get_or_create(
            user=user,
            group=group
        )


def build_menu(buttons: Iterable[Any], n_cols: int,
               header_buttons=None,
               footer_buttons=None) -> list[Any]:
    """–§—É–Ω–∫—Ü–∏—è —à–∞–±–ª–æ–Ω –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫"""
    menu = [buttons[i:i + n_cols] for i in range(0, len(buttons), n_cols)]
    if header_buttons:
        menu.insert(0, [header_buttons])
    if footer_buttons:
        menu.append[(footer_buttons)]
    return menu


def main_menu(update: Update, context: CallbackContext) -> None:
    """–ö–Ω–æ–ø–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∞ —ç–∫—Ä–∞–Ω."""
    chat = update.effective_chat
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name

    if User.objects.filter(username=user_id).exists():
        button_list = [
            InlineKeyboardButton('üé≠ –∞–Ω–µ–∫–¥–æ—Ç',
                                 callback_data='show_joke'),
            InlineKeyboardButton('üåÅ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é',
                                 callback_data='gen_image_first'),
        ]
        reply_markup = InlineKeyboardMarkup(build_menu(button_list, n_cols=2))

        menu_text = (
            "* üí°  –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ  üí° *".center(25, " ")
            + "\n"
            + f"–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}".center(25, " ")
        )
        context.bot.send_message(
            chat.id,
            menu_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        assign_group(update)
    else:
        reply_text = (
            f'{update.effective_user.first_name}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –ø–æ '
            f'—Å—Å—ã–ª–∫–µ [–¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏]'
            f'({context.bot.link}) üîÜ'
        )
        send_service_message(chat.id, reply_text, parse_mode='Markdown')


def private_menu(update: Update, context: CallbackContext) -> None:
    """–ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é –ø–æ–≥–æ–¥—ã —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º"""
    chat = update.effective_chat
    user_id = update.message.from_user.id

    if (User.objects.filter(username=user_id).exists()
            and chat.type == 'private'):
        button_list = [
            InlineKeyboardButton('üõ∞ –º–æ—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã',
                                 callback_data='my_position'),
        ]
        reply_markup = InlineKeyboardMarkup(build_menu(button_list, n_cols=1))

        menu_text = ('* üí°  –ú–ï–ù–Æ  üí° *'.center(28, '~'))
        context.bot.send_message(
            chat.id,
            menu_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        set_coordinates(update, context)
    else:
        raise_text = (
            f'{update.message.from_user.first_name}, —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ '
            f'—Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ [private chat]({context.bot.link}) —Å –±–æ—Ç–æ–º.'
        )
        message_id = context.bot.send_message(
            chat.id,
            raise_text,
            parse_mode='Markdown'
        ).message_id
        delete_messages_by_time.apply_async(
            args=[user_id, message_id],
            countdown=20
        )
        assign_group(update)


def ask_registration(update: Update, context: CallbackContext) -> None:
    """–°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –µ–≥–æ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ."""
    chat = update.effective_chat
    first_name = update.message.from_user.first_name
    if chat.type == 'private':
        button_list = [
            KeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é üìã', request_location=True),
        ]
        reply_markup = ReplyKeyboardMarkup(
            build_menu(button_list, n_cols=1),
            resize_keyboard=True
        )
        menu_text = (
            f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å, {first_name}!\n'
            '–í–Ω–∏–∑—É –ø–æ—è–≤–∏–ª–∞—Å—å –∫–Ω–æ–ø–∫–∞ —Å –Ω–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏.\n'
            '–ü–µ—Ä–≤—ã–º –¥–µ–ª–æ–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ—ë –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–≥–æ–¥—É '
            '–≤ –í–∞—à–µ–º –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞.'
        )
        context.bot.send_message(
            chat.id,
            menu_text,
            reply_markup=reply_markup
        )
        Signup().register(update, context)
